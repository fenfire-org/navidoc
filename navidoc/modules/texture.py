#
# Copyright (c) 2003 by Asko Soukka
# 
# This file is part of Navidoc.
# 
# Navidoc is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# Navidoc is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
# 
# You should have received a copy of the GNU General
# Public License along with Navidoc; if not, write to the Free
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA  02111-1307  USA
# 

#$Id: texture.py,v 1.3 2003/05/22 10:52:21 humppake Exp $

#
# Written by Asko Soukka
#

"""
This module is dependent on papers generated by a script in Libvob CVS.
"""

__docformat__ = 'reStructuredText'

import config

import os.path
import re
import sha

from navidoc.util.path import *

dbg = config.dbg.shorthand('texture')
dbg_navidoc = config.dbg.shorthand('navidoc')

base_path = ''

def postprocess(path, set_base_path=1):
    """
    HTML postprocessing function.
    """
    global base_path

    if set_base_path:
        config.working_directory = os.path.normpath(os.path.dirname(path))
        base_path = os.path.normpath(path)
    
    dbg("POSTPROCESS %s -> %s" % (path, base_path))
    
    dirlist = []
    if (os.path.isfile(path)): embed_procedural_texture(path)
    elif not os.path.exists(os.path.join(path, 'index.rst')): return
    else: dirlist = listdir(path, "html", dirs=1)

    for entry in dirlist:
        if os.path.isdir(slashify(path)+entry) \
               and not os.path.islink(slashify(path)+entry):
            postprocess(slashify(path)+entry, set_base_path=0)

        elif os.path.isfile(slashify(path)+entry):
            embed_procedural_texture(slashify(path)+entry)

def get_texture_filename(filepath):

    if filepath.endswith(config.midfix+'.html'):
        rstpath = filepath[0:len(filepath)-(len(config.midfix)+5)]+'.rst'
        if os.path.isfile(rstpath): filepath = rstpath
    elif filepath.endswith(".html"):
        rstpath = filepath[0:len(filepath)-5]+'.rst'
        if os.path.isfile(rstpath): filepath = rstpath

    if os.path.isfile(rstpath+'.texgenid'):
        id = long(open(rstpath+'.texgenid').read())
    else:
        full_path = config.base_url + relative_path(base_path, filepath)
        full_path = full_path.replace('./', '')

        hash = sha.new(full_path).hexdigest()
        id = long(hash[len(hash)-16:], 16)

        dbg('Filename %s Id %s' % (full_path, str(id)))

    # XXX config.midfix can't be used here, because paper is generated outside navidoc
    return slashify(base_path)+slashify(config.papers_directory)+str(id)+'-paper.gen.jpg'


def embed_procedural_texture(filepath):
    config.working_directory = os.path.normpath(os.path.dirname(filepath))
    config.input_filename = os.path.basename(filepath)
    config.output_filename = os.path.basename(filepath)

    texture_filepath = get_texture_filename(filepath)
    if not os.path.isfile(texture_filepath):
        dbg_navidoc('Texture %s for %s not found.' % (texture_filepath, filepath))
        return
        
    htmlfile = open(filepath)
    html = htmlfile.read()
    htmlfile.close()

    insert = html.upper().find('</HEAD>')

    s = """
<style type="text/css">
<!--
body {background-image:url(%s); background-repeat: repeat}
-->
</style>
""" % (relative_path(filepath, texture_filepath))

    if insert != -1 and html.find(s) == -1:
        out = open(filepath, "w")            
        out.write(html[:insert]);
        out.write(s)
        out.write(html[insert:])
        out.close()

        dbg_navidoc('Texture %s embedded into %s.' % (texture_filepath, filepath))
